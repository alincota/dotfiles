#!/bin/bash

# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$@"
}

function cheatmd() {
    cheat "$@" | mdless
}

function getPackageStatus() {
    dpkg-query -W -f='${Package} | ${Status} ${Version}\n' $@
}

# Check dependent packages (reverse dependencies)
function getDependentPackages() {
    apt-cache rdepends $@
}

# Utility to check commands exist
function _commandExists() {
    if ! [ -x "$(command -v $1)" ]; then
        echo "Error: $1 is not installed." >&2

        return 1;
    fi

    return 0;
}

function url_locations() {
    local URL="$1";
    curl --silent -I -L "${URL}" | grep -i "location";
}

function reverseDNS() {
    if ! _commandExists nmap; then
        return 1;
    fi

    nmap -sL $1
}

function getCertificateAlternativeNames() {
    if ! _commandExists openssl; then
        return 1;
    fi

    openssl x509 -in $1 -noout -text | grep -A 1 "Subject Alternative Name" 
}

function generateRandomPassword() {
    if ! _commandExists openssl; then
        return 1;
    fi

    openssl rand -base64 32
}

function getEmbeddedMetadata() {
    if ! _commandExists exiftool; then
        return 1;
    fi

    exiftool -s -s -f -m -d "%Y-%m-%d %H:%M:%S" -G $1
}

function cleanEmbeddedMetadata() {
    if ! _commandExists exiftool; then
        return 1;
    fi

    # check exiftool -all= -overwrite_original -E -gps:all= -EXIF:all= -XMP:all= -IPTC:all= $1
    exiftool -m -overwrite_original -E -gps:all= -EXIF:all= -XMP:all= -IPTC:all= $1
}

# Enable faster acceleration for mouse keys
function mousekeys() {
    if  ! _commandExists gsettings || ! _commandExists xkbset ; then
        return 1;
    fi

    MK_STATUS=$(gsettings get org.gnome.desktop.a11y.keyboard mousekeys-enable)

    if [ "$MK_STATUS" == "true" ]; then
        gsettings set org.gnome.desktop.a11y.keyboard mousekeys-enable false
        notify-send "Mousekeys OFF"
    else
        gsettings set org.gnome.desktop.a11y.keyboard mousekeys-enable true
        # xkbset ma [delay] [interval] [time to max] [max speed] [curve]
        xkbset ma 60 10 20 10 10
        notify-send "Mousekeys ON"
    fi
}

# @todo: move transmission related functions to a separate file
### Transmission ###
function _checkTransmissionCredentials() {
    if [ -z "${TRANSMISSION_USER}" ] || [ -z "${TRANSMISSION_PASS}" ]; then
        echo "Transmission credentials are not set!"
        echo "Add to ~/.extra Transmission's credentials: 'TRANSMISSION_USER' and 'TRANSMISSION_PASS'"

        return 1;
    fi

    return 0;
}

function t-do() {
    if ! _checkTransmissionCredentials; then
        return 1;
    fi

    transmission-remote -n "$TRANSMISSION_USER:$TRANSMISSION_PASS" -t$1 $@
}

function t-add() {
    if ! _checkTransmissionCredentials; then
        return 1;
    fi

    transmission-remote -n "$TRANSMISSION_USER:$TRANSMISSION_PASS" -a $1
}

# TODO: consider merging start/ stop functionality for ease of use
function t-start-torrent() {
    if ! _checkTransmissionCredentials; then
        return 1;
    fi

    transmission-remote -n "$TRANSMISSION_USER:$TRANSMISSION_PASS" -t$1 --start
}
function t-stop-torrent() {
    if ! _checkTransmissionCredentials; then
        return 1;
    fi

    transmission-remote -n "$TRANSMISSION_USER:$TRANSMISSION_PASS" -t$1 --stop
}

function t-list() {
    if ! _checkTransmissionCredentials; then
        return 1;
    fi

    transmission-remote -n "$TRANSMISSION_USER:$TRANSMISSION_PASS" -l
}

function t-basicstats() {
    if ! _checkTransmissionCredentials; then
        return 1;
    fi

    transmission-remote -n "$TRANSMISSION_USER:$TRANSMISSION_PASS" -st
}

function t-fullstats() {
    if ! _checkTransmissionCredentials; then
        return 1;
    fi

    transmission-remote -n "$TRANSMISSION_USER:$TRANSMISSION_PASS" -si
}
####################
